---
## installnagios.yml
## version 1.4
## Written for Ubuntu, Nagios, and Apache2. Tested on Ubuntu Server 16.04.03, 17.04, and 18.04. Tested with Nagios 4.3.4 and 4.4.1. Tested with Apache 2.4.18-2ubuntu3.4, Apache 2.4.25-3ubuntu2.2, and 2.4.29-1ubuntu4.1
## The goal is to find the latest version of Nagios from GitHub tags, download that version from the Nagios website, compile, install, and configure it.
## This is my first 'real' Ansible task, so I've probably done a lot incorrectly. Please don't run this; it's bound to break something.
- name: Set nagiosadmin password
  set_fact:
    nagiosadmin_pass: "{{ ansible_become_pass }}"
    nagiosadmin_user: nagiosadmin
## Replace ansible_become_pass with whatever you want nagiosadmin's password to be. vault-encrypted variables are preferable, but plaintext will also work if you remove the {{ }}


# __/\\\\\\\\\\\\\\\_______/\\\\\_______/\\\\\\\\\\\\__________/\\\\\____________        
#  _\///////\\\/////______/\\\///\\\____\/\\\////////\\\______/\\\///\\\__________       
#   _______\/\\\_________/\\\/__\///\\\__\/\\\______\//\\\___/\\\/__\///\\\________      
#    _______\/\\\________/\\\______\//\\\_\/\\\_______\/\\\__/\\\______\//\\\_______     
#     _______\/\\\_______\/\\\_______\/\\\_\/\\\_______\/\\\_\/\\\_______\/\\\__/\\\_    
#      _______\/\\\_______\//\\\______/\\\__\/\\\_______\/\\\_\//\\\______/\\\__\///__   
#       _______\/\\\________\///\\\__/\\\____\/\\\_______/\\\___\///\\\__/\\\__________  
#        _______\/\\\__________\///\\\\\/_____\/\\\\\\\\\\\\/______\///\\\\\/______/\\\_ 
#         _______\///_____________\/////_______\////////////__________\/////_______\///__
## TODO: configure exim4 to actually send email
## TODO: restore host definitions and libexec scripts from backup. Currently this doesn't work well.


- name: Stop Nagios if running
  become: true
  shell: systemctl stop nagios.service || true
#  raw: if [[ $(systemctl is-active nagios) || "$(systemctl status nagios)" == *"not-found"* ]] ; then systemctl stop nagios ; fi
#  register: nagiossystemd
#  changed_when: 
#    - nagiossystemd.stdout != ""
#    - nagiossystemd.stdout != "\r\n"
- name: Nagios should be inactive
  shell: systemctl is-active nagios.service || true
  register: nagiossystemctlstatus
- debug: msg="Nagios is {{nagiossystemctlstatus.stdout}}"

- name: Stop Apache if running
  become: true
  shell: systemctl stop apache2.service || true
#  shell: if [[ $(systemctl is-active apache2) || "$(systemctl status apache2)" == *"not-found"* ]] ; then systemctl stop apache2 ; fi
- name: Apache should be inactive
  shell: systemctl is-active apache2.service || true
  register: apachesystemctlstatus
- debug: msg="Apache is {{apachesystemctlstatus.stdout}}"



- name: Install Nagios prerequisites
  become: true
  raw: apt-get install -qy git autoconf gcc libc6 make wget unzip apache2 php libapache2-mod-php build-essential libgd-dev openssl libssl-dev xinetd apache2-utils unzip exim4-daemon-light mailutils
  when: "'Debian' in ansible_os_family"
  ## Maybe also install libgd2-xpm-dev

- name: Find the latest version of Nagios from its GitHub repo
  shell: "git ls-remote --tags git://github.com/NagiosEnterprises/nagioscore.git | awk -F '-' '{ print $2 }' | sort | tail -n 1"
  register: latestNagiosVersionOutput
#- debug: msg="{{latestNagiosVersionOutput.stdout}}"

- name: Save that version number as a variable
  set_fact: 
    latestNagiosVersion: "{{latestNagiosVersionOutput.stdout}}"
#- debug: msg="{{latestNagiosVersion}}"

- name: Remove any Nagios files from temp directory      ##   I don't think the 'files' module supports wildcards. I know rm does.
  shell: rm -rf /tmp/nagios-*

- name: Download and extract the latest release of Nagios
  unarchive:
    src: https://assets.nagios.com/downloads/nagioscore/releases/nagios-{{latestNagiosVersion}}.tar.gz
    dest: /tmp/
    remote_src: yes

- name: Create the Group "nagcmd" if it doesn't already exist
  become: true
  group:
    name: nagcmd
    state: present

- name: Add the user "nagios" with the secondary groups "nagcmd" and "www-data" if it isn't such already
  become: true
  user:
    name: nagios
    comment: Account to run all Nagios code including SSHing as a part of script or plugins
    groups: nagcmd,www-data
    append: yes
  when: "'Ubuntu' in ansible_distribution"

- name: Add the user "nagios" with the secondary groups "nagcmd" and "apache if it isn't such already -- untested
  become: true
  user:
    name: nagios
    comment: Account to run all Nagios code including SSHing as a part of script or plugins
    groups: nagcmd,www-data
    append: yes
  when: "'Debian' in ansible_distribution"

- name: Add the user "www-data" to the secondary group "nagcmd" if it isn't such already, so the web server can run Nagios commands.
  become: true
  user:
    name: www-data
    groups: nagcmd
    append: yes
  when: "'Ubuntu' in ansible_distribution"

- name: Add the user "apache" to the secondary group "nagcmd" if it isn't such already, so the web server can run Nagios commands. -- untested
  become: true
  user:
    name: apache
    groups: nagcmd
    append: yes
  when: "'Debian' in ansible_distribution"

- name: Configure Nagios
  shell: /tmp/nagios-{{latestNagiosVersion}}/configure --with-mail=/usr/bin/mail --with-nagios-group=nagios --with-command-group=nagcmd --with-httpd-conf=/etc/apache2/sites-enabled
  args:
    chdir: /tmp/nagios-{{latestNagiosVersion}}
#  register: configuration
#- name: Configuration results
#  debug: msg="{{configuration.stdout[7000:]}}"

- name: Compile Nagios
  shell: /usr/bin/make all
  args:
    chdir: /tmp/nagios-{{latestNagiosVersion}}
#  register: making
#- name: Make results
#  debug: msg="{{making.stdout[2800:]}}"



- name: Install most of Nagios (This installs the main program, CGIs, and HTML files)
  become: true
  shell: /usr/bin/make install
  args:
    chdir: /tmp/nagios-{{latestNagiosVersion}}

- name: Install Nagios command mode (This installs and configures permissions on the directory for holding the external command file)
  become: true
  shell: /usr/bin/make install-commandmode
  args:
    chdir: /tmp/nagios-{{latestNagiosVersion}}

- name: Install Nagios init (This installs the init script in /etc/init.d)
  become: true
  shell: /usr/bin/make install-init
  args:
    chdir: /tmp/nagios-{{latestNagiosVersion}}

# - name: Set up Nagios init
#   become: true
#   shell: update-rc.d nagios defaults

- name: Set up Nagios init
  become: true
  shell: systemctl enable nagios

- name: Install Nagios configs (This installs sample files to /usr/local/nagios/etc)
  become: true
  shell: /usr/bin/make install-config
  args:
    chdir: /tmp/nagios-{{latestNagiosVersion}}

- name: Install Nagios theme (This installs the Exfoliation theme for the Nagios web interface)
  become: true
  shell: /usr/bin/make install-exfoliation
  args:
    chdir: /tmp/nagios-{{latestNagiosVersion}}

- name: Copy Nagios web config to Apache2 available configs dir
  become: true
  shell: /usr/bin/install -c -m 644 sample-config/httpd.conf /etc/apache2/sites-available/nagios.conf
  args:
    chdir: /tmp/nagios-{{latestNagiosVersion}}

- name: Link Nagios web config to Apache2 enabled configs dir
  become: true
  shell: /bin/ln -sf /etc/apache2/sites-available/nagios.conf /etc/apache2/sites-enabled/nagios.conf



- name: Enable Apache module for CGI scripts
  become: true
  shell: a2enmod cgi

- name: Enable Apache module to allow 'rewrite' whatever that means
  become: true
  shell: a2enmod rewrite

- name: Set up nagios's nagiosadmin password. This will remove all Nagios users and add one user
  become: true
  shell: echo '{{ nagiosadmin_pass }}' | htpasswd -ic /usr/local/nagios/etc/htpasswd.users '{{ nagiosadmin_user }}'



- name: Copy non-existant plugins and checks from backup -- edit this line for a fuller restoration from backup
  become: true
  shell: tar -zxkf /mnt/tempansible/$(ls -t /mnt/tempansible/ | head -n1)/nagios_backup_*.tar.gz usr/local/nagios/libexec
  args:
    chdir: /
  when: "'Nagios' in mounted"
  ignore_errors: yes
  




- name: Restart Nagios
  become: true
  shell: systemctl restart nagios.service
- name: Ask systemD if Nagios is active
  shell: systemctl is-active nagios.service
  register: nagiossystemctlstatus
- debug: msg="Nagios is {{nagiossystemctlstatus.stdout}}"

- name: Restart Apache2
  become: true
  shell: systemctl restart apache2.service
- name: Ask systemD if Apache2 is active
  shell: systemctl is-active apache2.service
  register: apachesystemctlstatus
- debug: msg="Apache2 is {{apachesystemctlstatus.stdout}}"

- debug: msg="Installation finished. Log into http://{{ ansible_nodename }}/nagios with username {{ nagiosadmin_user }} and password {{ nagiosadmin_pass }}"
- debug: msg="SSH in and run 'sudo dpkg-reconfigure exim4-config' to configure Nagios email."

...
