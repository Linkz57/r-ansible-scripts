---
## provisionproxmox
## This should help significantly in testing our backups
##
## note: The hostname and vmid must both be unique; Ansible will skip over collisions, 
## not even making edits to the colided object, hence the time-as-hostname and auto-incriment vmid



## Here we actually create the containers
- name: Create {{vmnumber}} new {{virtual_object_os_friendly_name}} {{virtual_object_type}}s on {{proxmox_node}} whoes hostnames start with {{virtual_object_hostname}}
  register: create
  with_sequence: start=1 end='{{vmnumber | int}}' stride=1
  proxmox:
    node: '{{proxmox_node}}'
    api_user: '{{proxmox_username}}@pam'
    api_password: '{{proxmox_api_pass}}'
    api_host: '{{proxmox_api_host}}'
    validate_certs: '{{legit_certs}}'
    password: '{{virtual_object_pass}}'
    vmid:
    ## if vmid is not explicitly empty, Ansible will not create new objects and instead skip over existing ones.
#    vmid: '{{ item | int + 99 | int }}'
## uncomment vmid immediatly above to delete x number of VMs, and comment out hostname below, and comment out null vmid above, and change STATE to absent.
    hostname: '{{virtual_object_hostname}}-{{item}}-{{time_at_run}}'
    netif: '{"net0":"name=eth0,gw={{virtual_object_network_gateway}},ip={{virtual_object_network_address_base}}{{ item | int + virtual_object_network_address_end | int }}/{{virtual_object_network_mask}},bridge=vmbr0"}'
    ostemplate: '{{virtual_object_source_nas}}:{{virtual_object_source_installer}}'
    cores: 1
    cpus: 1
    cpuunits: 1000
    ## not sure what this means, maybe the "nice" value to assign to all in this container, from the hypervisor's point of view?
    disk: '{{virtual_object_disk_size}}'
    ## number of gigs to thin-provision as the 'root disk'
    memory: 512
    ## mibabytes
    swap: 512
    ## mibabytes
    unprivileged: '{{unprivileged_container}}'
    storage: local-zfs
    #pool: party
    nameserver:
    ## null means "use host settings"
    searchdomain:
    ## null means "use host settings"
    pubkey: '{{virtual_object_ssh_pubkey}}'
    state: present
    ## options are present, started, absent, stopped, restarted. Half of these require the HOSTNAME already exist.
    timeout: 30
    ## before giving up on this container and maybe failing or maybe going to the next container.
#  set_fact:
#    vmid{{item}}: { var: create.vmid }
  when: "'container' in virtual_object_type"
  ignore_errors: no




## Here we create VMs... later. Still haven't written this yet
# - name: Create {{vmnumber}} new {{virtual_object_os_friendly_name}} {{virtual_object_type}}s on {{proxmox_node}} whoes hostnames start with {{virtual_object_hostname}}
#   proxmox_kvm:
#     node: '{{proxmox_node}}'
#     api_user: '{{proxmox_username}}@pam'
#     api_password: '{{proxmox_api_pass}}'
#     api_host: '{{proxmox_api_host}}'
#     password: '{{ virtual_object_pass }}'
#     hostname: '{{virtual_object_hostname}}-{{item}}-{{time_at_run}}'
#     ostemplate: '{{virtual_object_source_nas}}:{{virtual_object_source_installer}}'
#     net: '{"net0":"virtio,bridge=vmbr1,rate=200"}'
#     virtio: '{"virtio0":"VMs_LVM:'virtual_object_disk_size',format=qcow2"}'
#     cores: 1
#     vcpus: 1
#     when: "'vm' in virtual_object_type"


# - name: print all info we have about the creation process, for human use.
#   debug: var=create.results


## Here we collect info from the created machines above, to be cleaned and addressed later.
- name: Get all network info from each virtual object that was just created
  set_fact:
    whole_network_stack: "{{ whole_network_stack | default ([]) | union ([create.results[(item|int)-1].invocation.module_args.netif.net0]) }}"
  with_sequence: start=1 end='{{vmnumber | int}}' stride=1



## Here we clean out the collected network info and distill it into just IP addresses, no duplicates, and no gateway IP.
- name: Filter down to just IP addresses
  set_fact:
    ip: "{{ whole_network_stack | string | regex_findall('\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b') | list | unique | difference(virtual_object_network_gateway) }}"

- name: print all IPs
  debug: msg="{{ip}}"



## Here we collect hostname info from the created machines above
- name: Get hostname info from each virtual object that was just created
  set_fact:
    created_hostnames: "{{ created_hostnames | default ([]) | union ([create.results[(item|int)-1].invocation.module_args.hostname]) }}"
  with_sequence: start=1 end='{{vmnumber | int}}' stride=1

- name: print all hostnames
  debug: msg="{{created_hostnames}}"



## Here we collect vmid numbers from the created machines above, to be cleaned up later
- name: Get VMID numbers from each virtual object that was just created
  set_fact:
    created_vmids: "{{ created_vmids | default ([]) | union ([create.results[(item|int)-1].msg[12:25]]) }}"
  with_sequence: start=1 end='{{vmnumber | int}}' stride=1



## Here we clean out the collected vmid numbers and distill it into just the number
- name: Filter down to just vmid numbers
  set_fact:
    vmids: "{{ created_vmids | string | regex_findall('\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b') | list }}"

- name: print all vmids
  debug: msg="{{vmids}}"



## Start the virtual objects created earlier
- name: Booting up {{vmnumber}} recently created {{virtual_object_os_friendly_name}} {{virtual_object_type}}s on {{proxmox_node}}
  #with_sequence: start=1 end='{{vmnumber}}' stride=1
  loop: '{{vmids}}'
  proxmox:
    node: '{{proxmox_node}}'
    api_user: '{{proxmox_username}}@pam'
    api_password: '{{proxmox_api_pass}}'
    api_host: '{{proxmox_api_host}}'
    password: '{{virtual_object_pass}}'
#    hostname: '{{virtual_object_hostname}}-{{item}}-{{time_at_run}}'
#    hostname: '{{created_hostnames}}'
    vmid: '{{item}}'
#    vmid: '{{ item | int + 99 | int }}'
    state: started
    ## options are present, started, absent, stopped, restarted. Half of these require the HOSTNAME already exist.
    timeout: 30
    ## before giving up on this container and maybe failing or maybe going to the next container.
#  set_fact:
#    vmid{{item}}: { var: create.vmid }
  when: "'container' in virtual_object_type"
  ignore_errors: no


- pause:
    seconds: 5




...
